#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* right;
    struct Node* left;
};

struct Node* newNode(int data)
{
    struct Node* neww = (struct Node*)malloc(sizeof(struct Node));
    neww->data = data;
    neww->left = NULL;
    neww->right = NULL;
    return neww;
}

void Mirror(struct Node* root)
{
    if(root == NULL)
    return;
    
    
    else{
        struct Node* temp;
        Mirror(root->left);
        Mirror(root->right);
        
        temp = root->left;
        root->left = root->right;
        root->right = temp;
    }
}

void inOrder(struct Node* root)
{
	if(root == NULL)
	return;
	else{
    inOrder(root->left);
    printf("%d ",root->data);
    inOrder(root->right);
}
}

int main()
{
  struct Node *root = newNode(1);
  root->left        = newNode(2);
  root->right       = newNode(3);
  root->left->left  = newNode(4);
  root->left->right = newNode(5); 
   
  /* Print inorder traversal of the input tree */
  printf("Inorder traversal of the constructed"
           " tree is \n");
  inOrder(root);
   
  /* Convert tree to its mirror */
  Mirror(root); 
   
  /* Print inorder traversal of the mirror tree */
  printf("\nInorder traversal of the mirror tree"
         " is \n");  
  inOrder(root);
   
  return 0;  
}
